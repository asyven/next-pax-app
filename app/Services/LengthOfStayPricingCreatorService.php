<?php

namespace App\Services;

use App\Entities\Availability;
use App\Entities\Price;
use App\Repositories\AvailabilityRepositoryInterface;
use App\Repositories\PriceRepositoryInterface;
use DateTime;

class LengthOfStayPricingCreatorService implements LengthOfStayPricingCreatorServiceInterface
{
    private PriceRepositoryInterface $priceRepository;

    private AvailabilityRepositoryInterface $availabilityRepository;

    public function __construct(
        PriceRepositoryInterface $priceRepository,
        AvailabilityRepositoryInterface $availabilityRepository
    ) {
        $this->priceRepository = $priceRepository;
        $this->availabilityRepository = $availabilityRepository;
    }

    /**
     * @param string $propertyId
     * @param DateTime $dateFrom
     * @param DateTime $dateTo
     * @return array
     */
    public function create(string $propertyId, DateTime $dateFrom, DateTime $dateTo): array
    {

        $availabilities = $this->availabilityRepository->findByPropertyAndDate($propertyId, $dateFrom, $dateTo);
        $prices = $this->priceRepository->findByPropertyAndDate($propertyId, $dateFrom, $dateTo);


        $los = $this->getLOS($availabilities, $prices);

        $table = $this->_printLOSTable($los);

        return ["table" => $table, "los" => $los];
    }

    /**
     * @param Availability[] $availabilities
     * @param Price[] $prices
     * @return array
     */
    public function getLOS(array $availabilities, array $prices): array
    {
        $los = [];

        foreach ($availabilities as $availability) {
            $date = $availability->getDate();
            $formattedDate = $availability->getDateString();

            if (isset($los[$formattedDate])) {
                continue;
            }

            $filteredPrices = array_filter(
                $prices,
                function ($v) use ($date, $availability) {
                    return $date >= $v->getPeriodFrom() && $date <= $v->getPeriodTill();
                }
            );


            if (empty($filteredPrices)) {
                continue;
            }

            foreach ($filteredPrices as $price) {
                $extraPersonPrice = $price->getExtraPersonPrice();
                $nightPrice = (int)$price->getAmount() / $price->getDuration();
                $persons = $price->getPersons();

                foreach ($persons as $personKey => $personsCount) {
                    // skip if no cheapest
                    if (isset($los[$formattedDate][$personsCount][1])) {
                        if ($los[$formattedDate][$personsCount][1] < $nightPrice) {
                            continue;
                        }
                    }

                    // generate days by price availability
                    $nights = range(1, $price->getMaximumStay());
                    $los[$formattedDate][$personsCount] = array_map(
                        function ($night) use (
                            $persons,
                            $personsCount,
                            $personKey,
                            $nightPrice,
                            $extraPersonPrice
                        ) {

                            $currentNightPrice = $night * $nightPrice;

                            $extraPersonsCount = $personsCount - $persons[0];
                            $hasExtra = $personKey !== 0;
                            $extraPrice = $hasExtra ? $night * $extraPersonPrice * $extraPersonsCount : 0;

                            return $currentNightPrice + $extraPrice;
                        },
                        $nights
                    );
                }
            }
        }

        return $los;
    }

    /**
     * returns LOS table generated by sprintf
     *
     * @param array $losData
     * @return string
     */
    private function _printLOSTable(array $losData): string
    {
        /**
         * @var array $headerData
         */
        $headerData = array_merge(["Date/Nights", "P"], range(1, 21));

        $table = $this->_printTableRow($headerData);
        $table .= PHP_EOL;

        foreach ($losData as $date => $losRow) {
            ksort($losRow);
            foreach ($losRow as $person => $prices) {
                $prices = array_map(
                    function ($p) {
                        return sprintf("%.2f", $p / 100);
                    },
                    $prices
                );
                $table .= $this->_printTableRow(array_merge([$date, $person], $prices));
            }
            $table .= PHP_EOL;
        }

        return $table;
    }

    /**
     * return string row with data for LOS table
     *
     * @param array $args
     * @return string
     */
    private function _printTableRow(array $args): string
    {
        $days = implode(
            "",
            array_map(
                function () {
                    return " %8s |";
                },
                range(1, 21)
            )
        );
        return sprintf("|%12s |%2s |" . $days . PHP_EOL, ...$args);
    }
}
